import logging
import os
import sqlite3
import pytz
from zoneinfo import ZoneInfo
from datetime import datetime, time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
)
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("horoscope_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSE_SIGN, GET_HOROSCOPE = range(2)

ZODIAC_SIGNS = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫",
    "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω",
    "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

class DatabaseManager:
    def __init__(self, db_name='horoscope_bot.db'):
        self.conn = sqlite3.connect(db_name)
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        with self.conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    zodiac_sign TEXT,
                    notification_time TIME,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS horoscopes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    zodiac_sign TEXT,
                    prediction TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(user_id) REFERENCES users(user_id)
                )
            ''')

    def update_user_zodiac(self, user_id: int, zodiac_sign: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)"""
        with self.conn:
            self.conn.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, zodiac_sign, updated_at)
                VALUES (?, ?, CURRENT_TIMESTAMP)
            ''', (user_id, zodiac_sign))

    def save_horoscope(self, user_id: int, zodiac_sign: str, prediction: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        with self.conn:
            self.conn.execute('''
                INSERT INTO horoscopes 
                (user_id, zodiac_sign, prediction)
                VALUES (?, ?, ?)
            ''', (user_id, zodiac_sign, prediction))

    def get_users_for_notification(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        with self.conn:
            cursor = self.conn.execute('''
                SELECT user_id, zodiac_sign 
                FROM users 
                WHERE notification_time IS NOT NULL
            ''')
            return cursor.fetchall()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        self.conn.close()

class HoroscopeBot:
    SYSTEM_PROMPT = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
    –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:
    1. –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
    2. –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    3. –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
    4. –ó–¥–æ—Ä–æ–≤—å–µ
    5. –°–æ–≤–µ—Ç—ã –¥–Ω—è
    
    –°—Ç–∏–ª—å: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞. 
    –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, —Å–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    –û–±—ä–µ–º: 200-250 —Å–ª–æ–≤."""

    def __init__(self):
        self._check_env_vars()
        self.tg_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.giga_credentials = os.getenv("GIGACHAT_CREDENTIALS")
        self.db = DatabaseManager()
        self.giga_client = GigaChat(
            credentials=self.giga_credentials,
            verify_ssl_certs=False
        )

    def _check_env_vars(self):
        required_vars = ["TELEGRAM_BOT_TOKEN", "GIGACHAT_CREDENTIALS"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        if missing_vars:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø ‚ôâ", callback_data='get_horoscope')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥.\n"
            "–Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def show_zodiac_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton(sign, callback_data=sign)]
            for sign in ZODIAC_SIGNS
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=reply_markup
        )

    async def generate_horoscope(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        zodiac_sign = query.data

        await query.edit_message_text(text=f"üîç –°–æ—Å—Ç–∞–≤–ª—è—é –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}...")

        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
            prediction = await self._get_horoscope_prediction(zodiac_sign)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self.db.update_user_zodiac(user_id, zodiac_sign)
            self.db.save_horoscope(user_id, zodiac_sign, prediction)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await query.message.reply_text(
                f"‚ôâ –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({zodiac_sign}):\n\n{prediction}"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {str(e)}")
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _get_horoscope_prediction(self, zodiac_sign: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç GigaChat"""
        messages = [
            Messages(role=MessagesRole.SYSTEM, content=self.SYSTEM_PROMPT),
            Messages(role=MessagesRole.USER, content=f"–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}")
        ]
        
        response = self.giga_client.chat(Chat(messages=messages, model="GigaChat"))
        return response.choices[0].message.content

    async def daily_horoscope_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤"""
        users = self.db.get_users_for_notification()
        
        for user_id, zodiac_sign in users:
            try:
                prediction = await self._get_horoscope_prediction(zodiac_sign)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üåÖ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø ({zodiac_sign}):\n\n{prediction}"
                )
                self.db.save_horoscope(user_id, zodiac_sign, prediction)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {user_id}: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.tg_token).build()
        job_queue = application.job_queue

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ 09:00 –ø–æ –ú–æ—Å–∫–≤–µ
        job_queue.run_daily(
            self.daily_horoscope_job,
            time(hour=9, minute=0, tzinfo=ZoneInfo("Europe/Moscow")),
            name="daily_horoscope"
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(CallbackQueryHandler(self.show_zodiac_menu, pattern='^get_horoscope$'))
        application.add_handler(CallbackQueryHandler(self.generate_horoscope, pattern=f'^({"|".join(ZODIAC_SIGNS)})$'))

        try:
            logger.info("Horoscope Bot started")
            application.run_polling()
        finally:
            self.db.close()

if __name__ == "__main__":
    try:
        bot = HoroscopeBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")